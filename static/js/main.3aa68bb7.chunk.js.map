{"version":3,"sources":["stateless/Movie.js","stateless/MovieList.js","stateless/Scroll.js","stateless/Smiley.js","stateful/App.js","serviceWorker.js","index.js"],"names":["Movie","episode_id","title","movieClick","release_date","className","onClick","MovieList","movies","map","key","Scroll","scrollAreaVisibility","children","style","overflowY","border","margin","height","Smiley","smileyAreaVisibility","smileyURL","answerIsCorrect","type","window","location","reload","background","src","alt","width","App","onMovieClick","event","titleOfMovieToMove","target","textContent","state","lowerMovieList","some","movie","upperMovieList","length","initialMovieList","zip","initial","correctMovieList","reduce","acc","upperMovie","correctMovie","setState","lowerMovieListVisibility","movieToMove","find","filter","concat","fetch","then","response","json","results","sortBy","shuffle","this","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3aa68bb7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Movie = ( { episode_id, title, release_date, movieClick } ) => {\n  return (\n    <h2 className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' onClick={movieClick}>{title}</h2>\n  )\n}\n\nexport default Movie;\n","import React from 'react';\nimport Movie from './Movie';\n\nconst MovieList = ( { movies, movieClick } ) => {\n  return (\n    <div>\n      { movies.map(({episode_id, title, release_date}) => {return <Movie key={episode_id} episode_id={episode_id} title={title} release_date={release_date} movieClick={movieClick} />}) }\n    </div>\n  );\n}\n\nexport default MovieList;\n","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = ( { scrollAreaVisibility, children } ) => {\n  return (\n    <div  className={scrollAreaVisibility}>\n      <div style={{overflowY: 'scroll', border: '1px solid silver', margin: '40px', height: '250px'}}>\n        {children}\n      </div>\n    </div>\n  )\n};\n\nexport default Scroll;\n","import React from 'react';\nimport './Smiley.css';\n\nconst Smiley = ( { smileyAreaVisibility, answerIsCorrect } ) => {\n  let thumbsUpSmileyURL = \"http://www.i2symbol.com/pictures/emojis/a/f/f/2/aff22723ab391b694c9bcae65ee2da76_384.png\";\n  let thumbsDownSmileyURL = \"http://www.i2symbol.com/pictures/emojis/4/9/7/2/49724b4bd12443c9764ffb57cabbce24_384.png\";\n  let smileyURL = thumbsDownSmileyURL;\n  if (answerIsCorrect) {\n    smileyURL = thumbsUpSmileyURL;\n  }\n\n  const refreshPage = () => {\n    window.location.reload();\n  }\n\n  return (\n    <div className={smileyAreaVisibility}>\n      <button type=\"button\" onClick={refreshPage} style={{background: 'Transparent', border: 'none'}}>\n        <img src={smileyURL} alt='smiley' height='240' width='240'/>\n        <p>Try again</p>\n      </button>\n    </div>\n  );\n}\n\nexport default Smiley;\n","import React, { Component } from 'react';\nimport MovieList from '../stateless/MovieList';\nimport Scroll from '../stateless/Scroll';\nimport Smiley from '../stateless/Smiley';\nimport './App.css';\nimport {shuffle, find, sortBy, zip, initial} from 'underscore';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      upperMovieList: [],\n      lowerMovieList: [],\n      correctMovieList: [],\n      initialMovieList: [],\n      answerIsCorrect: false,\n      lowerMovieListVisibility: \"visible\",\n      smileyAreaVisibility: \"hidden\",\n    };\n  };\n\n  componentDidMount() {\n    fetch('https://swapi.co/api/films')\n    .then(response => response.json())\n    .then(movies => this.setState({ initialMovieList: movies.results, correctMovieList: sortBy(movies.results, \"release_date\"), lowerMovieList: shuffle(movies.results) }));\n  }\n\n  onMovieClick = (event) => {\n    const titleOfMovieToMove = event.target.textContent\n    if (this.state.lowerMovieList.some(movie => movie.title === titleOfMovieToMove))  {\n      {/* The movie clicked is in the lower list */}\n      if (this.state.upperMovieList.length + 1 === this.state.initialMovieList.length ) {\n        {/* The upper list will contain all movies after the move */}\n        if (zip(this.state.upperMovieList, initial(this.state.correctMovieList)).reduce((acc, [upperMovie, correctMovie]) => {return acc && (upperMovie.release_date === correctMovie.release_date)}, true)) {\n          {/* The order of movies in the upper list will be correct after the move */}\n          this.setState({ answerIsCorrect: true, lowerMovieListVisibility: \"hidden\", smileyAreaVisibility: \"visible\" });\n        } else {\n          {/* The order of movies in the upper list will be incorrect after the move */}\n          this.setState({ answerIsCorrect: false, lowerMovieListVisibility: \"hidden\", smileyAreaVisibility: \"visible\" });\n        }\n      }\n      {/* The upper list will not contain all movies after the move */}\n      {/* So move the movie clicked from the lower list to the upper list */}\n      const movieToMove = find(this.state.lowerMovieList, movie => movie.title === titleOfMovieToMove);\n      this.setState({ lowerMovieList: this.state.lowerMovieList.filter(movie => movie.title  !== titleOfMovieToMove), upperMovieList: this.state.upperMovieList.concat([movieToMove]) });\n    } else {\n      {/* The movie clicked is in the upper list */}\n      if (this.state.lowerMovieListVisibility === \"visible\") {\n        {/* The lower movie list is visible */}\n        {/* So move the movie clicked from the upper list to the lower list */}\n        const movieToMove = find(this.state.upperMovieList, movie => movie.title === titleOfMovieToMove);\n        this.setState({ upperMovieList: this.state.upperMovieList.filter(movie => movie.title  !== titleOfMovieToMove), lowerMovieList: this.state.lowerMovieList.concat([movieToMove]) });\n      }\n    }\n  }\n\n  render() {\n    if (this.state.initialMovieList.length === 0) {\n      return <h2 className='loading'>Loading ...</h2>;\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>The Star Wars Movie Quiz</h1>\n          <Scroll scrollAreaVisibility=\"visible\">\n            <MovieList movies={this.state.upperMovieList} movieClick={this.onMovieClick} />\n          </Scroll>\n          <p className='f3 instruction'>Select the movies below in release date order.</p>\n          <Scroll scrollAreaVisibility={this.state.lowerMovieListVisibility}>\n            <MovieList movies={this.state.lowerMovieList} movieClick={this.onMovieClick} />\n          </Scroll>\n          <Smiley smileyAreaVisibility={this.state.smileyAreaVisibility} answerIsCorrect={this.state.answerIsCorrect} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './stateful/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}